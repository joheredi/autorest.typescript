/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const RootWithRefAndNoMeta: coreHttp.CompositeMapper = {
  serializedName: "RootWithRefAndNoMeta",
  type: {
    name: "Composite",
    className: "RootWithRefAndNoMeta",
    modelProperties: {
      refToModel: {
        serializedName: "RefToModel",
        type: { name: "Composite", className: "ComplexTypeNoMeta" }
      },
      something: { type: { name: "String" }, serializedName: "Something" }
    }
  }
};

export const ComplexTypeNoMeta: coreHttp.CompositeMapper = {
  serializedName: "ComplexTypeNoMeta",
  type: {
    name: "Composite",
    className: "ComplexTypeNoMeta",
    modelProperties: {
      iD: { type: { name: "String" }, serializedName: "ID" }
    }
  }
};

export const RootWithRefAndMeta: coreHttp.CompositeMapper = {
  serializedName: "RootWithRefAndMeta",
  type: {
    name: "Composite",
    className: "RootWithRefAndMeta",
    modelProperties: {
      refToModel: {
        serializedName: "RefToModel",
        type: { name: "Composite", className: "ComplexTypeWithMeta" }
      },
      something: { type: { name: "String" }, serializedName: "Something" }
    }
  }
};

export const ComplexTypeWithMeta: coreHttp.CompositeMapper = {
  serializedName: "ComplexTypeWithMeta",
  xmlName: "XMLComplexTypeWithMeta",
  type: {
    name: "Composite",
    className: "ComplexTypeWithMeta",
    modelProperties: {
      iD: { type: { name: "String" }, serializedName: "ID" }
    }
  }
};

export const Slideshow: coreHttp.CompositeMapper = {
  serializedName: "Slideshow",
  xmlName: "slideshow",
  type: {
    name: "Composite",
    className: "Slideshow",
    modelProperties: {
      title: {
        type: { name: "String" },
        serializedName: "title",
        xmlName: "title",
        xmlIsAttribute: true
      },
      date: {
        type: { name: "String" },
        serializedName: "date",
        xmlName: "date",
        xmlIsAttribute: true
      },
      author: {
        type: { name: "String" },
        serializedName: "author",
        xmlName: "author",
        xmlIsAttribute: true
      },
      slides: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Slide" } }
        },
        serializedName: "slides",
        xmlElementName: "slide"
      }
    }
  }
};

export const Slide: coreHttp.CompositeMapper = {
  serializedName: "Slide",
  xmlName: "slide",
  type: {
    name: "Composite",
    className: "Slide",
    modelProperties: {
      type: {
        type: { name: "String" },
        serializedName: "type",
        xmlName: "type",
        xmlIsAttribute: true
      },
      title: { type: { name: "String" }, serializedName: "title" },
      items: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "Slide-itemsItem",
            xmlName: "item"
          }
        },
        serializedName: "items",
        xmlElementName: "item"
      }
    }
  }
};

export const ErrorModel: coreHttp.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      status: { type: { name: "Number" }, serializedName: "status" },
      message: { type: { name: "String" }, serializedName: "message" }
    }
  }
};

export const AppleBarrel: coreHttp.CompositeMapper = {
  serializedName: "AppleBarrel",
  type: {
    name: "Composite",
    className: "AppleBarrel",
    modelProperties: {
      goodApples: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "AppleBarrel-GoodApplesItem",
            xmlName: "Apple"
          }
        },
        serializedName: "GoodApples",
        xmlName: "GoodApples",
        xmlElementName: "Apple"
      },
      badApples: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "AppleBarrel-BadApplesItem",
            xmlName: "Apple"
          }
        },
        serializedName: "BadApples",
        xmlName: "BadApples",
        xmlElementName: "Apple"
      }
    }
  }
};

export const Banana: coreHttp.CompositeMapper = {
  serializedName: "Banana",
  xmlName: "banana",
  type: {
    name: "Composite",
    className: "Banana",
    modelProperties: {
      name: {
        type: { name: "String" },
        serializedName: "name",
        xmlName: "name"
      },
      flavor: {
        type: { name: "String" },
        serializedName: "flavor",
        xmlName: "flavor"
      },
      expiration: {
        type: { name: "DateTime" },
        serializedName: "expiration",
        xmlName: "expiration"
      }
    }
  }
};

export const ListContainersResponse: coreHttp.CompositeMapper = {
  serializedName: "ListContainersResponse",
  xmlName: "EnumerationResults",
  type: {
    name: "Composite",
    className: "ListContainersResponse",
    modelProperties: {
      serviceEndpoint: {
        type: { name: "String" },
        serializedName: "ServiceEndpoint",
        required: true,
        xmlName: "ServiceEndpoint",
        xmlIsAttribute: true
      },
      prefix: {
        type: { name: "String" },
        serializedName: "Prefix",
        required: true
      },
      marker: { type: { name: "String" }, serializedName: "Marker" },
      maxResults: {
        type: { name: "Number" },
        serializedName: "MaxResults",
        required: true
      },
      containers: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Container" } }
        },
        serializedName: "Containers",
        xmlName: "Containers"
      },
      nextMarker: {
        type: { name: "String" },
        serializedName: "NextMarker",
        required: true
      }
    }
  }
};

export const Container: coreHttp.CompositeMapper = {
  serializedName: "Container",
  type: {
    name: "Composite",
    className: "Container",
    modelProperties: {
      name: {
        type: { name: "String" },
        serializedName: "Name",
        required: true
      },
      properties: {
        serializedName: "Properties",
        type: { name: "Composite", className: "ContainerProperties" }
      },
      metadata: {
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "string" }
        },
        serializedName: "Metadata"
      }
    }
  }
};

export const ContainerProperties: coreHttp.CompositeMapper = {
  serializedName: "ContainerProperties",
  type: {
    name: "Composite",
    className: "ContainerProperties",
    modelProperties: {
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "Last-Modified",
        required: true
      },
      etag: {
        type: { name: "String" },
        serializedName: "Etag",
        required: true
      },
      leaseStatus: {
        type: { name: "Enum", allowedValues: ["locked", "unlocked"] },
        serializedName: "LeaseStatus"
      },
      leaseState: {
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "leased",
            "expired",
            "breaking",
            "broken"
          ]
        },
        serializedName: "LeaseState"
      },
      leaseDuration: {
        type: { name: "Enum", allowedValues: ["infinite", "fixed"] },
        serializedName: "LeaseDuration"
      },
      publicAccess: { type: { name: "String" }, serializedName: "PublicAccess" }
    }
  }
};

export const StorageServiceProperties: coreHttp.CompositeMapper = {
  serializedName: "StorageServiceProperties",
  type: {
    name: "Composite",
    className: "StorageServiceProperties",
    modelProperties: {
      logging: {
        serializedName: "Logging",
        type: { name: "Composite", className: "Logging" }
      },
      hourMetrics: {
        serializedName: "HourMetrics",
        type: { name: "Composite", className: "Metrics" }
      },
      minuteMetrics: {
        serializedName: "MinuteMetrics",
        type: { name: "Composite", className: "Metrics" }
      },
      cors: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CorsRule" } }
        },
        serializedName: "Cors",
        xmlName: "Cors",
        xmlElementName: "CorsRule"
      },
      defaultServiceVersion: {
        type: { name: "String" },
        serializedName: "DefaultServiceVersion"
      },
      deleteRetentionPolicy: {
        serializedName: "DeleteRetentionPolicy",
        type: { name: "Composite", className: "RetentionPolicy" }
      }
    }
  }
};

export const Logging: coreHttp.CompositeMapper = {
  serializedName: "Logging",
  type: {
    name: "Composite",
    className: "Logging",
    modelProperties: {
      version: {
        type: { name: "String" },
        serializedName: "Version",
        required: true
      },
      delete: {
        type: { name: "Boolean" },
        serializedName: "Delete",
        required: true
      },
      read: {
        type: { name: "Boolean" },
        serializedName: "Read",
        required: true
      },
      write: {
        type: { name: "Boolean" },
        serializedName: "Write",
        required: true
      },
      retentionPolicy: {
        serializedName: "RetentionPolicy",
        type: { name: "Composite", className: "RetentionPolicy" }
      }
    }
  }
};

export const RetentionPolicy: coreHttp.CompositeMapper = {
  serializedName: "RetentionPolicy",
  type: {
    name: "Composite",
    className: "RetentionPolicy",
    modelProperties: {
      enabled: {
        type: { name: "Boolean" },
        serializedName: "Enabled",
        required: true
      },
      days: {
        type: { name: "Number" },
        serializedName: "Days",
        constraints: { InclusiveMinimum: 1 }
      }
    }
  }
};

export const Metrics: coreHttp.CompositeMapper = {
  serializedName: "Metrics",
  type: {
    name: "Composite",
    className: "Metrics",
    modelProperties: {
      version: { type: { name: "String" }, serializedName: "Version" },
      enabled: {
        type: { name: "Boolean" },
        serializedName: "Enabled",
        required: true
      },
      includeAPIs: { type: { name: "Boolean" }, serializedName: "IncludeAPIs" },
      retentionPolicy: {
        serializedName: "RetentionPolicy",
        type: { name: "Composite", className: "RetentionPolicy" }
      }
    }
  }
};

export const CorsRule: coreHttp.CompositeMapper = {
  serializedName: "CorsRule",
  xmlName: "CorsRule",
  type: {
    name: "Composite",
    className: "CorsRule",
    modelProperties: {
      allowedOrigins: {
        type: { name: "String" },
        serializedName: "AllowedOrigins",
        required: true
      },
      allowedMethods: {
        type: { name: "String" },
        serializedName: "AllowedMethods",
        required: true
      },
      allowedHeaders: {
        type: { name: "String" },
        serializedName: "AllowedHeaders",
        required: true
      },
      exposedHeaders: {
        type: { name: "String" },
        serializedName: "ExposedHeaders",
        required: true
      },
      maxAgeInSeconds: {
        type: { name: "Number" },
        serializedName: "MaxAgeInSeconds",
        required: true,
        constraints: {}
      }
    }
  }
};

export const SignedIdentifier: coreHttp.CompositeMapper = {
  serializedName: "SignedIdentifier",
  xmlName: "SignedIdentifier",
  type: {
    name: "Composite",
    className: "SignedIdentifier",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "Id", required: true },
      accessPolicy: {
        serializedName: "AccessPolicy",
        type: { name: "Composite", className: "AccessPolicy" }
      }
    }
  }
};

export const AccessPolicy: coreHttp.CompositeMapper = {
  serializedName: "AccessPolicy",
  type: {
    name: "Composite",
    className: "AccessPolicy",
    modelProperties: {
      start: {
        type: { name: "DateTime" },
        serializedName: "Start",
        required: true
      },
      expiry: {
        type: { name: "DateTime" },
        serializedName: "Expiry",
        required: true
      },
      permission: {
        type: { name: "String" },
        serializedName: "Permission",
        required: true
      }
    }
  }
};

export const ListBlobsResponse: coreHttp.CompositeMapper = {
  serializedName: "ListBlobsResponse",
  xmlName: "EnumerationResults",
  type: {
    name: "Composite",
    className: "ListBlobsResponse",
    modelProperties: {
      serviceEndpoint: {
        type: { name: "String" },
        serializedName: "ServiceEndpoint",
        required: true,
        xmlName: "ServiceEndpoint",
        xmlIsAttribute: true
      },
      containerName: {
        type: { name: "String" },
        serializedName: "ContainerName",
        required: true,
        xmlName: "ContainerName",
        xmlIsAttribute: true
      },
      prefix: {
        type: { name: "String" },
        serializedName: "Prefix",
        required: true
      },
      marker: {
        type: { name: "String" },
        serializedName: "Marker",
        required: true
      },
      maxResults: {
        type: { name: "Number" },
        serializedName: "MaxResults",
        required: true
      },
      delimiter: {
        type: { name: "String" },
        serializedName: "Delimiter",
        required: true
      },
      blobs: {
        serializedName: "Blobs",
        type: { name: "Composite", className: "Blobs" }
      },
      nextMarker: {
        type: { name: "String" },
        serializedName: "NextMarker",
        required: true
      }
    }
  }
};

export const Blobs: coreHttp.CompositeMapper = {
  serializedName: "Blobs",
  type: {
    name: "Composite",
    className: "Blobs",
    modelProperties: {
      blobPrefix: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "BlobPrefix" } }
        },
        serializedName: "BlobPrefix"
      },
      blob: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Blob" } }
        },
        serializedName: "Blob",
        xmlElementName: "Blob"
      }
    }
  }
};

export const BlobPrefix: coreHttp.CompositeMapper = {
  serializedName: "BlobPrefix",
  type: {
    name: "Composite",
    className: "BlobPrefix",
    modelProperties: {
      name: { type: { name: "String" }, serializedName: "Name", required: true }
    }
  }
};

export const Blob: coreHttp.CompositeMapper = {
  serializedName: "Blob",
  xmlName: "Blob",
  type: {
    name: "Composite",
    className: "Blob",
    modelProperties: {
      name: {
        type: { name: "String" },
        serializedName: "Name",
        required: true
      },
      deleted: {
        type: { name: "Boolean" },
        serializedName: "Deleted",
        required: true
      },
      snapshot: {
        type: { name: "String" },
        serializedName: "Snapshot",
        required: true
      },
      properties: {
        serializedName: "Properties",
        type: { name: "Composite", className: "BlobProperties" }
      },
      metadata: {
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "string" }
        },
        serializedName: "Metadata"
      }
    }
  }
};

export const BlobProperties: coreHttp.CompositeMapper = {
  serializedName: "BlobProperties",
  type: {
    name: "Composite",
    className: "BlobProperties",
    modelProperties: {
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "Last-Modified",
        required: true
      },
      etag: {
        type: { name: "String" },
        serializedName: "Etag",
        required: true
      },
      contentLength: {
        type: { name: "Number" },
        serializedName: "Content-Length"
      },
      contentType: { type: { name: "String" }, serializedName: "Content-Type" },
      contentEncoding: {
        type: { name: "String" },
        serializedName: "Content-Encoding"
      },
      contentLanguage: {
        type: { name: "String" },
        serializedName: "Content-Language"
      },
      contentMD5: { type: { name: "String" }, serializedName: "Content-MD5" },
      contentDisposition: {
        type: { name: "String" },
        serializedName: "Content-Disposition"
      },
      cacheControl: {
        type: { name: "String" },
        serializedName: "Cache-Control"
      },
      xMsBlobSequenceNumber: {
        type: { name: "Number" },
        serializedName: "x-ms-blob-sequence-number"
      },
      blobType: {
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        },
        serializedName: "BlobType"
      },
      leaseStatus: {
        type: { name: "Enum", allowedValues: ["locked", "unlocked"] },
        serializedName: "LeaseStatus"
      },
      leaseState: {
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "leased",
            "expired",
            "breaking",
            "broken"
          ]
        },
        serializedName: "LeaseState"
      },
      leaseDuration: {
        type: { name: "Enum", allowedValues: ["infinite", "fixed"] },
        serializedName: "LeaseDuration"
      },
      copyId: { type: { name: "String" }, serializedName: "CopyId" },
      copyStatus: {
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        },
        serializedName: "CopyStatus"
      },
      copySource: { type: { name: "String" }, serializedName: "CopySource" },
      copyProgress: {
        type: { name: "String" },
        serializedName: "CopyProgress"
      },
      copyCompletionTime: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "CopyCompletionTime"
      },
      copyStatusDescription: {
        type: { name: "String" },
        serializedName: "CopyStatusDescription"
      },
      serverEncrypted: {
        type: { name: "Boolean" },
        serializedName: "ServerEncrypted"
      },
      incrementalCopy: {
        type: { name: "Boolean" },
        serializedName: "IncrementalCopy"
      },
      destinationSnapshot: {
        type: { name: "String" },
        serializedName: "DestinationSnapshot"
      },
      deletedTime: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "DeletedTime"
      },
      remainingRetentionDays: {
        type: { name: "Number" },
        serializedName: "RemainingRetentionDays"
      },
      accessTier: { type: { name: "String" }, serializedName: "AccessTier" },
      accessTierInferred: {
        type: { name: "Boolean" },
        serializedName: "AccessTierInferred"
      },
      archiveStatus: {
        type: { name: "String" },
        serializedName: "ArchiveStatus"
      }
    }
  }
};

export const JSONInput: coreHttp.CompositeMapper = {
  serializedName: "JSONInput",
  type: {
    name: "Composite",
    className: "JSONInput",
    modelProperties: {
      id: { type: { name: "Number" }, serializedName: "id" }
    }
  }
};

export const JSONOutput: coreHttp.CompositeMapper = {
  serializedName: "JSONOutput",
  type: {
    name: "Composite",
    className: "JSONOutput",
    modelProperties: {
      id: { type: { name: "Number" }, serializedName: "id" }
    }
  }
};
