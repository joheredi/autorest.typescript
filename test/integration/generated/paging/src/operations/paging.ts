/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PagingClient } from "../pagingClient";

/**
 * Class representing a Paging.
 */
export class Paging {
  private readonly client: PagingClient;

  /**
   * Initialize a new instance of the class Paging class.
   * @param client Reference to the service client
   */
  constructor(client: PagingClient) {
    this.client = client;
  }
  getMultiplePages(
    options?: Models.PagingGetMultiplePagesOptionalParams
  ): AsyncIterableIterator<Models.Product[]> {
    const iter = this.getMultiplePagesGenerator(undefined, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      }
    };
  }

  private async *getMultiplePagesGenerator(
    nextLink?: string,
    options?: Models.PagingGetMultiplePagesOptionalParams
  ): AsyncIterableIterator<Models.Product[]> {
    let response;
    if (!!nextLink || nextLink === undefined) {
      do {
        response = await this._getMultiplePages({ ...options, nextLink });
        nextLink = response.nextLink;
        yield response.values || [];
      } while (nextLink);
    }
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private _getMultiplePages(
    options?: Models.PagingGetMultiplePagesOptionalParams & {
      nextLink?: string;
    }
  ): Promise<Models.PagingGetMultiplePagesResponse> {
    return this.client.sendOperationRequest(
      { options },
      options?.nextLink
        ? multiplePagesNextOperationSpec
        : getMultiplePagesOperationSpec
    ) as Promise<Models.PagingGetMultiplePagesResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

// Move to models/parameters.ts
const nextLinkParameter: coreHttp.OperationURLParameter = {
  parameterPath: ["options", "nextLink"],
  mapper: {
    serializedName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

const getMultiplePagesOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.maxresults,
    Parameters.timeout
  ],
  serializer
};

const multiplePagesNextOperationSpec = {
  ...getMultiplePagesOperationSpec,
  path: "{nextLink}",
  urlParameters: [
    ...(getMultiplePagesOperationSpec.urlParameters || []),
    nextLinkParameter
  ]
};

const getOdataMultiplePagesOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple/odata",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.maxresults,
    Parameters.timeout
  ],
  serializer
};
