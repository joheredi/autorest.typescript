"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
const prettier = require("prettier");
const ts_morph_1 = require("ts-morph");
const transforms_1 = require("./transforms/transforms");
const clientFileGenerator_1 = require("./generators/clientFileGenerator");
const clientContextFileGenerator_1 = require("./generators/clientContextFileGenerator");
const modelsGenerator_1 = require("./generators/modelsGenerator");
const mappersGenerator_1 = require("./generators/mappersGenerator");
const indexGenerator_1 = require("./generators/indexGenerator");
const packageFileGenerator_1 = require("./generators/static/packageFileGenerator");
const apiExtractorConfig_1 = require("./generators/static/apiExtractorConfig");
const licenseFileGenerator_1 = require("./generators/static/licenseFileGenerator");
const readmeFileGenerator_1 = require("./generators/static/readmeFileGenerator");
const tsConfigFileGenerator_1 = require("./generators/static/tsConfigFileGenerator");
const rollupConfigFileGenerator_1 = require("./generators/static/rollupConfigFileGenerator");
const operationGenerator_1 = require("./generators/operationGenerator");
const parametersGenerator_1 = require("./generators/parametersGenerator");
const LROGenerator_1 = require("./generators/LROGenerator");
const tracingFileGenerator_1 = require("./generators/tracingFileGenerator");
const prettierTypeScriptOptions = {
    parser: "typescript",
    arrowParens: "always",
    bracketSpacing: true,
    endOfLine: "lf",
    printWidth: 80,
    semi: true,
    singleQuote: false,
    tabWidth: 2
};
const prettierJSONOptions = {
    parser: "json",
    tabWidth: 2,
    semi: false,
    singleQuote: false
};
async function generateTypeScriptLibrary(codeModel, host) {
    const project = new ts_morph_1.Project({
        useInMemoryFileSystem: true,
        manipulationSettings: {
            indentationText: ts_morph_1.IndentationText.TwoSpaces
        }
    });
    const srcPath = (await host.GetValue("source-code-folder-path")) || "src";
    const clientDetails = await transforms_1.transformCodeModel(codeModel, host);
    clientDetails.srcPath = srcPath;
    clientDetails.tracing = await getTracingInfo(host);
    const packageName = (await host.GetValue("package-name")) || clientDetails.name;
    const packageNameParts = packageName.match(/(^@(.*)\/)?(.*)/);
    const packageDetails = {
        name: packageName,
        scopeName: packageNameParts[2],
        nameWithoutScope: packageNameParts[3],
        description: clientDetails.description,
        version: (await host.GetValue("package-version")) || "1.0.0"
    };
    const shouldGenerateLicense = (await host.GetValue("license-header")) || false;
    const hideClients = (await host.GetValue("hide-clients")) || false;
    // Skip metadata generation if `generate-metadata` is explicitly false
    if ((await host.GetValue("generate-metadata")) !== false) {
        packageFileGenerator_1.generatePackageJson(clientDetails, packageDetails, project);
        licenseFileGenerator_1.generateLicenseFile(project, shouldGenerateLicense);
        readmeFileGenerator_1.generateReadmeFile(clientDetails, packageDetails, project);
        tsConfigFileGenerator_1.generateTsConfig(project);
        rollupConfigFileGenerator_1.generateRollupConfig(clientDetails, packageDetails, project);
        apiExtractorConfig_1.generateApiExtractorConfig(clientDetails, project);
    }
    clientFileGenerator_1.generateClient(clientDetails, project, hideClients);
    clientContextFileGenerator_1.generateClientContext(clientDetails, packageDetails, project, hideClients);
    modelsGenerator_1.generateModels(clientDetails, project);
    mappersGenerator_1.generateMappers(clientDetails, project);
    operationGenerator_1.generateOperations(clientDetails, project);
    parametersGenerator_1.generateParameters(clientDetails, project);
    indexGenerator_1.generateIndexFile(clientDetails, project);
    await LROGenerator_1.generateLROFiles(clientDetails, project);
    tracingFileGenerator_1.generateTracingFile(clientDetails, project);
    const licenseHeader = `
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
`;
    // Save the source files to the virtual filesystem
    project.saveSync();
    const fs = project.getFileSystem();
    // Loop over the files
    for (const file of project.getSourceFiles()) {
        const filePath = file.getFilePath();
        const isJson = /\.json$/gi.test(filePath);
        const isSourceCode = /\.(ts|js)$/gi.test(filePath);
        let fileContents = fs.readFileSync(filePath);
        // Add the license header to source code files
        if (shouldGenerateLicense && isSourceCode) {
            fileContents = `${licenseHeader.trimLeft()}\n${fileContents}`;
        }
        // Format the contents if necessary
        if (isJson || isSourceCode) {
            fileContents = prettier.format(fileContents, isJson ? prettierJSONOptions : prettierTypeScriptOptions);
        }
        // Write the file to the AutoRest host
        host.WriteFile(filePath.substr(1), // Get rid of the leading slash '/'
        fileContents);
    }
}
exports.generateTypeScriptLibrary = generateTypeScriptLibrary;
async function getTracingInfo(host) {
    const tracing = (await host.GetValue("tracing-info")) || undefined;
    if (tracing && tracing.namespace && tracing.packagePrefix) {
        return tracing;
    }
    const namespace = (await host.GetValue("tracing-info.namespace")) || undefined;
    const packagePrefix = (await host.GetValue("tracing-info.packagePrefix")) || undefined;
    if (packagePrefix && namespace) {
        return {
            namespace,
            packagePrefix
        };
    }
    if (!tracing && !packagePrefix && !namespace) {
        return undefined;
    }
    throw new Error("Invalid tracing-info. Make sure that namespace and packagePrefix are defined");
}
//# sourceMappingURL=typescriptGenerator.js.map